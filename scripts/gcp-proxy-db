#!/usr/bin/env bash

set -euo pipefail

target=replica

for i in "$@"
do
  case $i in
      --production)
	  target=production
    ;;
  esac
done

# cloud_sql_proxy notes:

# 1) `cloud_sql_proxy` is a google thing
# (https://cloud.google.com/sql/docs/postgres/sql-proxy) that takes your gcloud
# creds and uses them to open a proxy to the specified db and exposes it using
# either a tcp port or a unix socket. (We're using the latter, it's not exposed
# to the docker host so no need to use a port.)
#
# 2) In theory we could block until this connects and then continue - perhaps
# using `expect` - but in practice, the proxy is quick enough to launch that
# this doesn't seem necessary
#
# 3) This does leave around a cloud_sql_proxy process per invoke of this script.
# If that ends up being a problem, we could try reaping them periodically, or
# perhaps if `ps | grep cloud_sql_proxy | wc -l` is greater than some threshold.
#
# 4) -verbose=false because we don't need to know about non-error'ing client
# connection open/close events

PROJECT=balmy-ground-195100
REGION=us-west1
PROD_DB=dark-west
REPLICA_DB=dark-west-read-replica



if [ "${target}x" == "productionx" ]; then
  echo "Connecting to production"
  DB="${PROD_DB}"
else
  echo "Connecting to the replica"
  DB="${REPLICA_DB}"
fi

INSTANCE="${PROJECT}:${REGION}:${DB}"

echo "Setting up proxy to ${INSTANCE}"

cloud_sql_proxy \
    -verbose=false \
    -instances "${INSTANCE}=tcp:2345" 


