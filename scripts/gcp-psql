#!/usr/bin/env bash
. ./scripts/support/assert-in-container "$0" "$@"

set -euo pipefail

# Despite the name, this launches either pgcli (interactive mode) or psql (allowing piped input) - see comment at the bottom

# Don't call this for the user - if their kubectl context is set to another
# cluster, this will break that.
# ./scripts/gcp-authorize-kubectl

arg="${1:-}"

./scripts/gcp-proxy-db "$arg" &
# Make sure it has time to come up before we try to connect to it
sleep 1s

SECRET=$(kubectl get secrets cloudsql-db-credentials -o json)

PGUSERNAME=$(echo "${SECRET}" |  jq -r '.data.username' | base64 -d)
PGPASSWORD=$(echo "${SECRET}" |  jq -r '.data.password' | base64 -d)
export PGUSERNAME
export PGPASSWORD

# If we're in a terminal (not a pipe), use pgcli, which has nice interactive fea tures like autocomplete of columns.
# If we're in a pipe, then use psql (pgcli doesn't let you pipe in a query, psql does)
if [[ -t 0 ]]; then
    pgcli -h localhost -p 2345 --username=${PGUSERNAME} postgres
else
    psql -h localhost -p 2345 --user=${PGUSERNAME} postgres
fi
